// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// after each updating this file restart development server if you have in the package.json for "dev" atribute this value "prisma generate && nodemon index.js",

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int           @id @default(autoincrement())
  email       String?       @db.VarChar(250)
  role        String?       @db.VarChar(100)
  company_scraper        String?       @db.VarChar(100)
  stats       DailyStat[]
  reviews     Reviews[]
  DailyQAStat DailyQAStat[]

  @@map("ext_users")
}





model Snipx_Users {
  id                Int                @id @default(autoincrement())
  email             String?            @db.VarChar(250)
  role              String?            @db.VarChar(100)
  managedBy         Int?
  profilePictureUrl String?
  PDP               String?
  AI_PDP            String?
  manager           Snipx_Users?       @relation("ManagedBy", fields: [managedBy], references: [id])
  subordinates      Snipx_Users[]      @relation("ManagedBy")
  snippets          SnipxSnippet[]

  // Relation to SnipxUserCompany
  company           SnipxUserCompany?  @relation("UserToCompany")

  // Relation to SnipxUserTeam for teams
  userTeams         SnipxUserTeam[]    @relation("UserToTeam")

  // Relation to SnipxRating for skill ratings
  ratings           SnipxRating[]      @relation("UserToRatings")

  // Relation to SnipxTaskUser for task assignments
  tasks             SnipxTaskUser[]    @relation("UserToTasks")

  @@map("snipx_users")
}

model SnipxSnippet {
  id           Int           @id @default(autoincrement())
  user_id      Int?
  type         String?       @db.VarChar(100)
  date         String?       @db.VarChar(250)
  text         String?       @db.VarChar(1500)
  green        Json?
  orange       Json?
  red          Json?
  sentiment    String?       @db.VarChar(100)
  score        String?       @db.VarChar(100)
  explanations String?       @db.VarChar(1500)
  action_text       String?       @db.VarChar(1000) 

  user         Snipx_Users?  @relation(fields: [user_id], references: [id])

  @@map("snipx_snippets")
}

model Snipx_Company {
  id            Int               @id @default(autoincrement())
  company_name  String?           @db.VarChar(500)

  // Relation to SnipxUserCompany
  users         SnipxUserCompany[] @relation("UserToCompany")

  // Relation to SnipxTeams for teams
  teams         SnipxTeams[]       @relation("CompanyToTeams")

  // Relation to SnipxSkill for company-specific skills
  skills        SnipxSkill[]       @relation("CompanyToSkills")

  // Relation to SnipxTask for company-specific tasks
  tasks         SnipxTask[]        @relation("CompanyToTasks")

  @@map("snipx_company")
}

model SnipxUserCompany {
  id         Int          @id @default(autoincrement())
  user_id    Int          @unique
  company_id Int

  // Define relations
  user       Snipx_Users  @relation("UserToCompany", fields: [user_id], references: [id])
  company    Snipx_Company @relation("UserToCompany", fields: [company_id], references: [id])

  @@map("snipx_user_company")
}

model SnipxTeams {
  id            Int            @id @default(autoincrement())
  team_name     String         @db.VarChar(250)
  company_id    Int
  average_score Float?

  // Relation to Snipx_Company
  company       Snipx_Company  @relation("CompanyToTeams", fields: [company_id], references: [id])

  // Relation to SnipxUserTeam for team members
  teamMembers   SnipxUserTeam[] @relation("TeamToMembers")

  @@map("snipx_teams")
}

model SnipxUserTeam {
  id       Int           @id @default(autoincrement())
  user_id  Int
  team_id  Int

  // Relation to Snipx_Users
  user     Snipx_Users   @relation("UserToTeam", fields: [user_id], references: [id])

  // Relation to SnipxTeams
  team     SnipxTeams    @relation("TeamToMembers", fields: [team_id], references: [id])

  @@unique([user_id, team_id])  // Ensures a user can only be in a team once

  @@map("snipx_user_team")
}

model SnipxSkill {
  id          Int            @id @default(autoincrement())
  skill_name  String         @db.VarChar(250)
  company_id  Int?           // Make this field nullable
  desc1       String?        @db.VarChar(255)
  desc2       String?        @db.VarChar(255)
  desc3       String?        @db.VarChar(255)
  desc4       String?        @db.VarChar(255)
  desc5       String?        @db.VarChar(255)

  // Relation to Snipx_Company
  company     Snipx_Company?  @relation("CompanyToSkills", fields: [company_id], references: [id])

  ratings     SnipxRating[]  @relation("SkillToRatings")
  taskSkills  SnipxTaskSkill[] @relation("TaskToSkills")

  @@unique([company_id, skill_name])

  @@map("snipx_skill")
}



model SnipxRating {
  id          Int           @id @default(autoincrement())
  user_id     Int
  skill_id    Int
  score       Int           @db.Int
  created_at  DateTime       @default(now())

  // Relation to Snipx_Users
  user        Snipx_Users   @relation("UserToRatings", fields: [user_id], references: [id])

  // Relation to SnipxSkill
  skill       SnipxSkill    @relation("SkillToRatings", fields: [skill_id], references: [id])

  @@map("snipx_rating")
}

// New SnipxTask model for tasks
model SnipxTask {
  id              Int             @id @default(autoincrement())
  task_name       String          @db.VarChar(255)
  task_description String?        @db.Text
  task_type       String?         @db.VarChar(100)
  company_id      Int
  created_at      DateTime        @default(now())

  // Relation to Snipx_Company
  company         Snipx_Company   @relation("CompanyToTasks", fields: [company_id], references: [id])

  // Relation to SnipxTaskUser for task assignments to users
  assignedUsers   SnipxTaskUser[] @relation("TaskToUsers")

  // Relation to SnipxTaskSkill for task-specific skills and scores
  taskSkills      SnipxTaskSkill[] @relation("TaskToSkills")

  @@map("snipx_task")
}

// New SnipxTaskUser model for user-task assignments
model SnipxTaskUser {
  id       Int        @id @default(autoincrement())
  task_id  Int
  user_id  Int

  // Relation to Snipx_Users
  user     Snipx_Users  @relation("UserToTasks", fields: [user_id], references: [id])

  // Relation to SnipxTask
  task     SnipxTask    @relation("TaskToUsers", fields: [task_id], references: [id])

  @@unique([task_id, user_id])

  @@map("snipx_task_user")
}

// New SnipxTaskSkill model for task-skill assignments with scores
model SnipxTaskSkill {
  id       Int    @id @default(autoincrement())
  task_id  Int
  skill_id Int
  score    Int    @db.Int

  // Relation to SnipxTask
  task     SnipxTask   @relation("TaskToSkills", fields: [task_id], references: [id])

  // Relation to SnipxSkill
  skill    SnipxSkill  @relation("TaskToSkills", fields: [skill_id], references: [id])

  @@unique([task_id, skill_id])

  @@map("snipx_task_skill")
}








model DailyStat {
  id           Int                @id @default(autoincrement())
  user         Int
  date         DateTime?
  totalSourced Int?
  userRelation Users              @relation(fields: [user], references: [id])
  candidates   SourcedCandidate[]
  stats        SourcedStats[]

  @@map("ext_daily_stats")
}

model SourcedCandidate {
  id           Int       @id @default(autoincrement())
  candidateURL String?   @db.VarChar(2048)
  dailyStatsId Int
  dailyStat    DailyStat @relation(fields: [dailyStatsId], references: [id])

  @@map("ext_sourced_candidates")
}

model SourcedStats {
  id           Int       @id @default(autoincrement())
  dailyStatsId Int
  jobId        Int
  relevant     Int?
  unrelevant   Int?
  dailyStat    DailyStat @relation(fields: [dailyStatsId], references: [id])
  job          Jobs      @relation(fields: [jobId], references: [id])

  @@map("ext_sourced_stats")
}

model Jobs {
  id             Int             @id @default(autoincrement())
  title          String?         @unique @db.VarChar(250)
  minConnections Int?
  universities   String?         @db.LongText
  gradYear       String?         @db.VarChar(250)
  experience     String?         @db.VarChar(250)
  relevantRoles  String?         @db.LongText
  skills         String?         @db.LongText
  relevantDoc    String?         @db.VarChar(500)
  stats          SourcedStats[]
  owners         JobOwners[]
  created        jobCreatedTypes
  allSkills      JobSkill[]

  @@map("ext_jobs")
}

model JobOwners {
  id    Int    @id @default(autoincrement())
  jobId Int
  owner String @db.VarChar(500)
  job   Jobs   @relation(fields: [jobId], references: [id])

  @@map("ext_job_owners")
}

model DailyQAStat {
  id            Int                 @id @default(autoincrement())
  user          Int
  date          DateTime?
  totalReviewed Int?
  userRelation  Users               @relation(fields: [user], references: [id])
  candidates    ReviewedCandidate[]

  @@map("ext_daily_qa_stats")
}

model ReviewedCandidate {
  id           Int         @id @default(autoincrement())
  candidateURL String?     @db.VarChar(2048)
  dailyStatsId Int
  dailyStat    DailyQAStat @relation(fields: [dailyStatsId], references: [id])

  @@map("ext_reviewed_candidates")
}

model Reviews {
  id         Int          @id @default(autoincrement())
  qaOwner    Int
  comment    String?      @db.Text
  score      String?      @db.VarChar(10)
  date       DateTime?
  User       Users        @relation(fields: [qaOwner], references: [id])
  Candidates Candidates[]

  @@map("ext_reviews")
}

model Candidates {
  id               Int     @id @default(autoincrement())
  reviewId         Int
  dataType         String? @db.VarChar(50)
  rowNum           Int?
  name             String? @db.VarChar(500)
  owner            String? @db.VarChar(255)
  status           String? @db.VarChar(500)
  transfered       String? @db.VarChar(500)
  relevant         String? @db.VarChar(50)
  LIprofileOld     String? @db.VarChar(2048)
  LIprofileNew     String? @db.VarChar(2048)
  connections      String? @db.VarChar(50)
  currentRole      String? @db.VarChar(500)
  country          String? @db.VarChar(500)
  university       String? @db.VarChar(500)
  yearOfGrad       String? @db.VarChar(50)
  currentCompany   String? @db.VarChar(500)
  yrsInCurrentComp String? @db.VarChar(500)
  totalExp         String? @db.VarChar(50)
  seniority        String? @db.VarChar(500)
  jobType          String? @db.VarChar(500)
  skills           String? @db.Text
  reachoutTopic    String? @db.VarChar(500)
  reachoutComment  String? @db.Text
  qaScore          String? @db.VarChar(50)
  qaComment        String? @db.Text
  Review           Reviews @relation(fields: [reviewId], references: [id])

  @@map("ext_candidates")
}

model AllSkills {
  id   Int        @id @default(autoincrement())
  name String     @unique @db.VarChar(500)
  jobs JobSkill[]
  candidates CandidateSkill[]

  @@map("ext_all_skills")
}

model JobSkill {
  jobId   Int
  skillId Int
  job     Jobs      @relation(fields: [jobId], references: [id])
  skill   AllSkills @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
  @@map("ext_job_skill")
}

model CandidateSkill {
  candidateId Int
  skillId     Int
  skills      AllSkills  @relation(fields: [skillId], references: [id])

  @@id([candidateId, skillId])
  @@map("dtb_candidate_skill")
}

enum jobCreatedTypes {
  manual
  auto
}
